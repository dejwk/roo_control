/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_ROO_CONTROL_TRANSCEIVERS_PB_H_INCLUDED
#define PB_ROO_CONTROL_TRANSCEIVERS_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _roo_control_Quantity {
    roo_control_Quantity_kUnspecifiedQuantity = 0,
    /* Fundamental. */
    roo_control_Quantity_kElapsedTime = 1, /* [seconds]. */
    roo_control_Quantity_kMass = 2, /* [kilograms]. */
    roo_control_Quantity_kTemperature = 3, /* [deg C]. */
    roo_control_Quantity_kFrequency = 4, /* [Hz]. */
    roo_control_Quantity_kLength = 5, /* [m]. */
    roo_control_Quantity_kAngle = 6, /* [rad]. */
    /* Displacement. */
    roo_control_Quantity_kDistance = 10, /* [m]. */
    roo_control_Quantity_kVelocity = 11, /* [m/s]. */
    roo_control_Quantity_kAcceleration = 12, /* [m/s^2]. */
    roo_control_Quantity_kJerk = 13, /* [m/s^3]. */
    /* Force and energy. */
    roo_control_Quantity_kForce = 20, /* [N]. */
    roo_control_Quantity_kPressure = 21, /* [Pa]. */
    roo_control_Quantity_kEnergy = 22, /* [J]. */
    roo_control_Quantity_kPower = 23, /* [W]. */
    /* Spatial. */
    roo_control_Quantity_kArea = 30, /* [m^2]. */
    roo_control_Quantity_kVolume = 31, /* [m^3]. */
    /* Liquids. */
    roo_control_Quantity_kLiquidVolume = 40, /* [liter]. */
    roo_control_Quantity_kLiquidFlow = 41, /* [liter/min]. */
    /* Thermodynamics. */
    roo_control_Quantity_kHeat = 50, /* [J]. */
    /* Magnetism. */
    roo_control_Quantity_kMagneticFlux = 60, /* [We]. */
    /* Electricity. */
    roo_control_Quantity_kElectricCharge = 70, /* [C]. */
    roo_control_Quantity_kElectricCurrent = 71, /* [A]. */
    roo_control_Quantity_kVoltage = 72, /* [V]. */
    roo_control_Quantity_kResistance = 73, /* [Ohm]. */
    roo_control_Quantity_kImpedance = 74, /* [Ohm]. */
    roo_control_Quantity_kCapacitance = 75, /* [F]. */
    roo_control_Quantity_kInductance = 76, /* [T]. */
    /* Light. */
    roo_control_Quantity_kLuminousIntensity = 90, /* [lumen]. */
    roo_control_Quantity_kColorHue = 95, /* [0-360). */
    roo_control_Quantity_kColorSaturation = 96, /* [0-1]. */
    roo_control_Quantity_kColorBrightness = 97, /* [0-1]. */
    /* Geolocation. */
    roo_control_Quantity_kLatitude = 110, /* [-90-90] (North is positive). */
    roo_control_Quantity_kLongitude = 111, /* [-180-180] (East is positive). */
    roo_control_Quantity_kAltitude = 112, /* [m]. */
    /* Environmental. */
    roo_control_Quantity_kAirHumidity = 130 /* [%]. */
} roo_control_Quantity;

/* Struct definitions */
typedef struct _roo_control_TransceiverDescriptor_Sensor {
    char id[24];
    roo_control_Quantity quantity;
} roo_control_TransceiverDescriptor_Sensor;

typedef struct _roo_control_TransceiverDescriptor_Actuator {
    char id[24];
    roo_control_Quantity quantity;
} roo_control_TransceiverDescriptor_Actuator;

typedef struct _roo_control_TransceiverDescriptor {
    char schema[16];
    char id[24];
    pb_size_t sensors_count;
    roo_control_TransceiverDescriptor_Sensor sensors[16];
    pb_size_t actuators_count;
    roo_control_TransceiverDescriptor_Actuator actuators[16];
} roo_control_TransceiverDescriptor;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _roo_control_Quantity_MIN roo_control_Quantity_kUnspecifiedQuantity
#define _roo_control_Quantity_MAX roo_control_Quantity_kAirHumidity
#define _roo_control_Quantity_ARRAYSIZE ((roo_control_Quantity)(roo_control_Quantity_kAirHumidity+1))


#define roo_control_TransceiverDescriptor_Sensor_quantity_ENUMTYPE roo_control_Quantity

#define roo_control_TransceiverDescriptor_Actuator_quantity_ENUMTYPE roo_control_Quantity


/* Initializer values for message structs */
#define roo_control_TransceiverDescriptor_init_default {"", "", 0, {roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default, roo_control_TransceiverDescriptor_Sensor_init_default}, 0, {roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default, roo_control_TransceiverDescriptor_Actuator_init_default}}
#define roo_control_TransceiverDescriptor_Sensor_init_default {"", _roo_control_Quantity_MIN}
#define roo_control_TransceiverDescriptor_Actuator_init_default {"", _roo_control_Quantity_MIN}
#define roo_control_TransceiverDescriptor_init_zero {"", "", 0, {roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero, roo_control_TransceiverDescriptor_Sensor_init_zero}, 0, {roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero, roo_control_TransceiverDescriptor_Actuator_init_zero}}
#define roo_control_TransceiverDescriptor_Sensor_init_zero {"", _roo_control_Quantity_MIN}
#define roo_control_TransceiverDescriptor_Actuator_init_zero {"", _roo_control_Quantity_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define roo_control_TransceiverDescriptor_Sensor_id_tag 1
#define roo_control_TransceiverDescriptor_Sensor_quantity_tag 2
#define roo_control_TransceiverDescriptor_Actuator_id_tag 1
#define roo_control_TransceiverDescriptor_Actuator_quantity_tag 2
#define roo_control_TransceiverDescriptor_schema_tag 1
#define roo_control_TransceiverDescriptor_id_tag 2
#define roo_control_TransceiverDescriptor_sensors_tag 3
#define roo_control_TransceiverDescriptor_actuators_tag 4

/* Struct field encoding specification for nanopb */
#define roo_control_TransceiverDescriptor_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   schema,            1) \
X(a, STATIC,   SINGULAR, STRING,   id,                2) \
X(a, STATIC,   REPEATED, MESSAGE,  sensors,           3) \
X(a, STATIC,   REPEATED, MESSAGE,  actuators,         4)
#define roo_control_TransceiverDescriptor_CALLBACK NULL
#define roo_control_TransceiverDescriptor_DEFAULT NULL
#define roo_control_TransceiverDescriptor_sensors_MSGTYPE roo_control_TransceiverDescriptor_Sensor
#define roo_control_TransceiverDescriptor_actuators_MSGTYPE roo_control_TransceiverDescriptor_Actuator

#define roo_control_TransceiverDescriptor_Sensor_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   id,                1) \
X(a, STATIC,   SINGULAR, UENUM,    quantity,          2)
#define roo_control_TransceiverDescriptor_Sensor_CALLBACK NULL
#define roo_control_TransceiverDescriptor_Sensor_DEFAULT NULL

#define roo_control_TransceiverDescriptor_Actuator_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   id,                1) \
X(a, STATIC,   SINGULAR, UENUM,    quantity,          2)
#define roo_control_TransceiverDescriptor_Actuator_CALLBACK NULL
#define roo_control_TransceiverDescriptor_Actuator_DEFAULT NULL

extern const pb_msgdesc_t roo_control_TransceiverDescriptor_msg;
extern const pb_msgdesc_t roo_control_TransceiverDescriptor_Sensor_msg;
extern const pb_msgdesc_t roo_control_TransceiverDescriptor_Actuator_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define roo_control_TransceiverDescriptor_fields &roo_control_TransceiverDescriptor_msg
#define roo_control_TransceiverDescriptor_Sensor_fields &roo_control_TransceiverDescriptor_Sensor_msg
#define roo_control_TransceiverDescriptor_Actuator_fields &roo_control_TransceiverDescriptor_Actuator_msg

/* Maximum encoded size of messages (where known) */
#define ROO_CONTROL_TRANSCEIVERS_PB_H_MAX_SIZE   roo_control_TransceiverDescriptor_size
#define roo_control_TransceiverDescriptor_Actuator_size 28
#define roo_control_TransceiverDescriptor_Sensor_size 28
#define roo_control_TransceiverDescriptor_size   1002

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
